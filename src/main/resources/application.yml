server:
  port: 8080
spring:
  application:
    name: stream-rabbit-demo
  rabbitmq:
    host: localhost
    port: 5672
    virtual-host: dvp
    username: dvp
    password: test123
    stream:
      bindings:
        #消费者配置
        delay-consumer:
          destination: demo.delay.topic
          group: test-group
        route-consumer:
          destination: demo.route.topic
          group: test-group
        exception-consumer:
          destination: demo.exception.topic
          group: test-group
          consumer:
            max-attempts: 3 # 消费尝试次数，默认值为3。设置为1 代表不重试
            requeue-rejected: true # 在该配置作用之下，消息消费失败之后，并不会将该消息抛弃，而是将消息重新放入队列，所以消息的消费逻辑会被重复执行，直到这条消息消费成功为止。
        dlq-consumer:
          content-type: application/json
          destination: demo.dlq.topic
          group: test-group
          consumer:
            ttl: 20000 # 默认不做限制，即无限。消息在队列中最大的存活时间。当消息滞留超过ttl时，会被当成消费失败消息，即会被转发到死信队列或丢弃.
            concurrency: 1 # 初始/最少/空闲时 消费者数量。默认1 stream  会动态增加消费者
            max-attempts: 3 # 消费尝试次数，默认值为3。设置为1 代表不重试
            back-off-initial-interval: 1000 # 消息消费失败后重试消费消息的初始化间隔时间。默认1s，即第一次重试消费会在1s后进行
            back-off-multiplier: 5 # 相邻两次重试之间的间隔时间的倍数。默认2，即第二次是第一次间隔时间的2倍，第三次是第二次的2倍
            back-off-max-interval: 10000 # 下一次尝试重试的最大时间间隔，默认为10000ms，即10s。
        #生产者配置
        delay-producer:
          destination: demo.delay.topic
        route-producer:
          destination: demo.route.topic
        exception-producer:
          destination: demo.exception.topic
        dlq-producer:
          destination: demo.dlq.topic
      rabbit:
        bindings:
          #消费者配置
          delay-consumer:
            consumer:
              # 开启延迟消息队列
              delayed-exchange: true
          route-consumer:
            consumer:
              delayed-exchange: true
          exception-consumer:
            consumer:
              delayed-exchange: true
          dlq-consumer:
            consumer:
              delayed-exchange: true
              # 死信队列DLQ相关
              auto-bind-dlq: true  # 是否自动声明死信队列（DLQ）并将其绑定到死信交换机（DLX）。默认是false。
#              dead-letter-queue-name: 'demo.dlq.test-group.dlq' # 默认prefix + destination + group + .dlq。DLQ的名称。
#              dead-letter-exchange: 'DLX' # 默认prefix + DLX。DLX的名称
#              dead-letter-routingKey: 'demo.dlq.test-group' # 默认destination + group
#              dlq-expires: 30000 # 队列所有 customer 下线, 且在过期时间段内 queue 没有被重新声明, 多久之后队列会被销毁, 注意, 不管队列内有没有消息. 默认不设置.
#              dlq-lazy: false # 是否声明为惰性队列（Lazy Queue）.默认false
#              dlq-max-length: 100000 # 队列中消息数量的最大限制. 默认不限制
#              dlq-max-length-bytes: 100000000 # 队列所有消息总字节的最大限制. 默认不限制
#              dlq-max-priority: 255 # 队列的消息可以设置的最大优先级. 默认不设置
#              dlq-ttl: 1000000 # 队列的消息的过期时间. 默认不限制
#              republish-toDlq: true # 默认false。当为true时，死信队列接收到的消息的headers会更加丰富，多了异常信息和堆栈跟踪。
#              republish-delivery-mode: DeliveryMode.PERSISTENT # 默认DeliveryMode.PERSISTENT（持久化）。当republishToDlq为true时，转发的消息的delivery mode
          #生产者配置
          delay-producer:
            producer:
              # 开启延迟消息队列
              delayed-exchange: true
          route-producer:
            producer:
              # 开启延迟消息队列
              delayed-exchange: true
          exception-producer:
            producer:
              delayed-exchange: true
          dlq-producer:
            producer:
              # 开启延迟消息队列
              delayed-exchange: true

logging:
  file:
    name: ../logs/dvp/${spring.application.name}/${spring.application.name}.log
